#!/usr/bin/env python
# This script can be run over a WA assets directory structure (e.g.
# the contents of ~/.workload_automation/dependencies/) into order
# to genrate a JSON index to be hosted along with said structure on
# an HTTP server.
# By setting remote_assets_url to point to the URL of the hosted
# index in WA config, it the possible to get WA to fetch assets from
# the server on as-need basis if they are not found locally.
import os
import sys
import argparse
import hashlib
import logging
import json
import fnmatch

CHUNK = 2048

IGNORE_PATTERNS = [
    '*.DS_Store',
]


def should_ignore(filepath):
    for pattern in IGNORE_PATTERNS:
        if fnmatch.fnmatch(filepath, pattern):
            return True
    return False


def index_assets(rootdir):
    if not os.path.exists(rootdir):
        raise RuntimeError("'{}' does not exist".format(rootdir))
    assets = []
    for root, _, files in os.walk(rootdir):
        for f in files:
            path = os.path.join(root, f)
            relpath = os.path.relpath(path, rootdir)

            if should_ignore(relpath):
                continue

            h = hashlib.sha256()
            with open(path, 'rb') as fh:
                buf = fh.read(CHUNK)
                while buf:
                    h.update(buf)
                    buf = fh.read(CHUNK)

            asset = {'path': relpath, 'sha256': h.hexdigest()}
            logging.debug(asset)
            assets.append(asset)
    return assets


def get_index(assets_directory):
    index = {}
    for entry in os.listdir(assets_directory):
        path = os.path.join(assets_directory, entry)
        if not os.path.isdir(path):
            logging.debug('skipping {}: not a directory'.format(entry))
            continue
        logging.debug('indexing {}'.format(path))
        index[entry] = index_assets(path)
    return index


def main(args):
    if args.input is not None and args.names is None:
        raise RuntimeError("--input can only be used when --names is used")
    if args.input is None and args.names is not None:
        args.input = os.path.join(args.directory, "index.json")

    # Set logging level
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(levl=logging.INFO)

    index = {}
    if args.names:
        # Load an existing index and update new values
        if args.input is not None:
            with open(args.input) as rfh:
                index = json.load(rfh)

        # Update index's args.names entries
        for name in args.names:
            new = index_assets(os.path.join(args.directory, name))
            index[name] = new

    # Create a new index of all asset folders
    else:
        index = get_index(args.directory)

    # Output to a file
    if args.output:
        with open(args.output, 'w') as wfh:
            json.dump(index, wfh, indent=4, separators=(',', ': '))
    # Output to STDOUT
    else:
        json.dump(index, sys.stdout, indent=4, separators=(',', ': '))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='create an index of WA assets from a WA assets directory.')
    parser.add_argument('directory', metavar='DIR',
                        help='directory containing WA assets.')
    parser.add_argument('-o', '--output', metavar='FILE',
                        help='Output file. If not specified will default to STDOUT')
    parser.add_argument('-n', '--names', nargs='+', metavar='NAME',
                        help='A list of the NAMEs of asset directories to be re-indexed')
    parser.add_argument('-i', '--input', metavar='FILE',
                        help='An existing index file to use as a base when adding assets via --name')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Enable verbose output')
    sys.exit(main(parser.parse_args()))
